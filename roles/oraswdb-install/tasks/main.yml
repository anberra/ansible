---

  - name: Check if DB-server is already installed
    shell: grep "{{ oracle_home_db  }}" "{{ oracle_inventory_loc }}/ContentsXML/inventory.xml" |wc -l
    with_items: "{{oracle_databases}}"
    tags:
    - checkifdbinstall
    register: checkdbswinstall

  - name: Add new dotprofile (DB)
    template: src=dotprofile-db.j2 dest={{ oracle_user_home }}/{{oracle_profile_name }} owner={{ oracle_user }} group={{ oracle_group }} mode=775 backup=yes
    with_items: "{{oracle_databases}}"
    tags:
    - dotprofiledb

  - name: Add oraInst.loc
    template: src=oraInst.loc.j2 dest=/etc/oraInst.loc owner={{ oracle_user }} group={{ oracle_group }} mode=644 backup=yes
    tags:
    - orainst

  - name: Create stage directory (base)
    file: dest={{ oracle_stage }} mode=775 owner={{ oracle_user }} group={{ oracle_group }} state=directory
    tags:
      - directoriesdb

  - name: Create stage directory (version specific)
    file: dest={{ oracle_stage }}/{{ item[0].version }} mode=775 owner={{ oracle_user }} group={{ oracle_group }} state=directory
    with_nested:
       - "{{ oracle_sw_image_db }}"
       - "{{ oracle_databases }}"
    when: master_node and item[0].version == item[1].oracle_version_db
    tags:
      - directoriesdb

  - name: Create rsp stage directory
    file: dest={{ oracle_rsp_stage }} mode=775 owner={{ oracle_user }} group={{ oracle_group }} state=directory
    tags:
      - directoriesdb

  - name: Create ORACLE_BASE directory
    file: dest={{ oracle_base }} mode=775 owner={{ oracle_user }} group={{ oracle_group }} state=directory
    tags:
      - directoriesdb

  - name: Create cfgtoollogs directory
    file: dest={{ oracle_base }}/cfgtoollogs mode=775 owner={{ oracle_user }} group={{ oracle_group }} state=directory recurse=yes
    become: yes
    tags:
      - directoriesdb

  - name: Create admin directory
    file: dest={{ oracle_base }}/admin mode=775 owner={{ oracle_user }} group={{ oracle_group }} state=directory
    become: yes
    tags:
      - directoriesdb

  - name: Create audit directory
    file: dest={{ oracle_base }}/audit mode=775 owner={{ oracle_user }} group={{ oracle_group }} state=directory
    become: yes
    tags:
      - directoriesdb

  - name: Create ORACLE_HOME directory
    file: dest={{ oracle_home_db }} mode=775 owner={{ oracle_user }} group={{ oracle_group }} state=directory
    with_items: "{{oracle_databases}}"
    tags:
      - directoriesdb

  - name: Create oraInventory directory
    file: dest={{ oracle_inventory_loc }} mode=775 owner={{ oracle_user }} group={{ oracle_group }} state=directory
    tags:
      - directoriesdb

  - name: Transfer oracle installfiles to server (local)
    copy: src={{ oracle_sw_source_local }}/{{ item[0].filename }} dest={{ oracle_stage }} mode=775
    with_nested:
      - "{{oracle_sw_image_db}}"
      - "{{oracle_databases}}"
    become: yes
    become_user: "{{ oracle_user }}"
    when: master_node and item[0].version == item[1].oracle_version_db and is_sw_source_local and oracle_sw_copy|bool
    tags:
      - oradbsw

  - name: Extract files to stage-area
    unarchive: src={{ oracle_stage }}/{{ item[0].filename }}  dest={{ oracle_stage }}/{{ item[0].version }} copy=no
    with_nested:
      - "{{oracle_sw_image_db}}"
      - "{{oracle_databases}}"
    become: yes
    become_user: "{{ oracle_user }}"
    when: master_node and item[0].version == item[1].oracle_version_db and oracle_sw_copy|bool and oracle_sw_unpack|bool
    tags:
      - oradbswunpack

  - name: Extract files to stage-area (from remote location)
    unarchive: src={{ oracle_stage_remote }}/{{ item[0].filename }}  dest={{ oracle_stage }}/{{ item[0].version }} copy=no
    with_nested:
      - "{{oracle_sw_image_db}}"
      - "{{oracle_databases}}"
    become: yes
    become_user: "{{ oracle_user }}"
    when: master_node and item[0].version == item[1].oracle_version_db and not oracle_sw_copy|bool and oracle_sw_unpack|bool
    tags:
      - oradbswunpack


  - name: Setup response file for install (DB)
    template: src=db-install.rsp.{{ item.0.oracle_version_db }}.j2 dest={{ oracle_rsp_stage }}/{{ oracle_db_responsefile }}
    with_together:
     - "{{oracle_databases}}"
     - "{{checkdbswinstall.results}}"
    become: yes
    become_user: "{{ oracle_user }}"
    when: master_node #and item.1.stdout != "1"
    tags:
      - responsefileswdb

  - name: Create script to install Database Server
    template: src=run-db-install.sh.j2 dest={{ oracle_rsp_stage }}/{{ oracle_db_run_install }} mode=755
    with_together:
     - "{{oracle_databases}}"
     - "{{checkdbswinstall.results}}"
    become: yes
    become_user: "{{ oracle_user }}"
    when: master_node #and item.1.stdout != "1"
    tags:
      - responsefileswdb

  - name: Install Oracle Database Server
    #shell: "{{ oracle_stage_install }}/{{ item.0.oracle_version_db }}/database/runInstaller -responseFile {{ oracle_rsp_stage }}/{{ oracle_db_responsefile }} -ignorePrereq -ignoreSysPrereqs -silent -waitforcompletion"
    shell: "{{ oracle_rsp_stage }}/{{ oracle_db_run_install }}"
    with_together:
     - "{{oracle_databases}}"
     - "{{checkdbswinstall.results}}"
    become: yes
    become_user: "{{ oracle_user }}"
    when: master_node and item.1.stdout != "1"
    tags:
      - oradbinstall
    register: oradbinstall

  - debug: var=item
    with_items:
        #- "{{ oradbinstall.results }}"
        - "{{ oradbinstall.results|map(attribute='stdout_lines')|list }}"
    when: master_node
    tags:
     - oradbinstall
    ignore_errors: true


#  - name: Run oraInstroot script after installation
#    shell: "{{ oracle_inventory_loc }}/orainstRoot.sh"
#    become: yes
#    become_user: root
#    tags:
#      - runroot

  - name: Run root script after installation
    shell: "{{ oracle_home_db }}/root.sh"
    with_together:
     - "{{oracle_databases}}"
     - "{{checkdbswinstall.results}}"
    when: master_node and item.1.stdout != "1"
    #with_items: oracle_databases
    #when: master_node
    tags:
      - runroot

  - name: Check opatch lsinventory (DB)
    shell: "{{ oracle_home_db }}/OPatch/opatch lsinventory"
    with_items: "{{oracle_databases}}"
    become: yes
    become_user: "{{ oracle_user }}"
    when: master_node
    register: opatchls
    tags:
     - opatchls

  - debug: var=item
    with_items:
        - "{{ opatchls.results|map(attribute='stdout_lines')|list }}"
    when: master_node
    tags:
     - opatchls
    ignore_errors: true

